@startuml
skinparam linetype ortho
skinparam Monochrome true
skinparam classAttributeIconSize 0

title MES UML

'Factory'
class Factory <<Singleton>> {

}

CommandManager "1"--* Factory
DatabaseManager "1"--* Factory
RoutingManager "1"--* Factory
CommsManager "1"--* Factory
OrderManager "1"--* Factory

/'

Basic blocks

'/

class PartType {
  - PartType registerType(type);
  - short internalId;
  - String name;
  - Color defaultColor;

  + String getName();
  + short getInternalId();
  + Color getDefaultColor();
  + bool isUnknown();
  + PartType getType(name);
  + PartType getTypes();
}

class Part {
  - UUID id;
  - int orderId;
  - PartState state;

  + UUID getId();
  + int getOrderId();
  + PartState getState();
}

Part -- PartType

class EnumTool {
  - int id;
  + int getId();
}

/'

Conveyors

'/

class Conveyor {
  - int id;
  - EnumConveyor type;

  + int getId();
  + Part[] getParts();
  + bool hasPart(Part);
}

Conveyor -- Part

/'

Processes

'/

class Process {
  - EnumTool tool;
  - Duration duration;
   

  + Process(source, result, tool, duration);
  + EnumTool getTool();
  + Duration getDuration();
}

Process -- "2" PartType
Process -- "1" EnumTool

/'

Communication

'/

'Requests'

class CommandManager{

  + void enqueueRequest(CommandRequest request);
  + void enqueueRequests(CommandRequest[] requests);
  + void enqueueRequest(string);
  + void sendResponse();
  + void pollRequests();
  
}

interface CommandRequest {
  + void onReceive();
}

class CommandRequestTransform {
}

CommandRequestTransform --|> CommandRequest
CommandRequestTransform --"1" TransformOrder
TransformOrder -- "2" PartType


class CommandRequestUnload {
  - int orderId;
  - int quantity;

  + int getOrderId();
  + int getQuantity();
}

CommandRequestUnload --|> CommandRequest
CommandRequestUnload -- "1" Conveyor
CommandRequestUnload -- "1" PartType

class CommandRequestOrderList {
}

CommandRequestOrderList --|> CommandRequest

class CommandRequestPartList {
}

CommandRequestPartList --|> CommandRequest

'Orders'
class TransformOrder{
  - int orderId;
  - Date receivedDate;
  - Date startDate;
  - Date finishDate;
  - Date date;
  - int quantity;
  - int remaining;
  - int holding;
  - int completed;
  - Date deadline;
  - int penalty;

  + int getOrderId();
  + Date getDate();
  + int getQuantity();
  + int getDayPenalty();
  + int computePenalty(Date);
  + Date getReceivedDate();
  + Date getStartDate();
  + Date getFinishDate();
  + int getRemaining();
  + int getHolding();
  + int getCompleted();
  + Date getDeadline();

}

class UnloadOrder{
  - int orderId;
	- int conveyorId;
  - PartType partType;
  - Date date;
  - int quantity;
  - int remaining;
  - int completed;

  + int getOrderId();
  + int getConveyorId();
  + Date getDate();
  + int getQuantity();
  + PartType getPartType();
  + int getRemaining();
  + int getCompleted();
}

UnloadOrder --"1" PartType
UnloadOrder "1"-- CommandRequestUnload

class LoadOrder{
  - int orderId;
	- int conveyorId;
  - Date date;

  + int getOrderId();
  + int getConveyorId();
  + Date getDate();
}

LoadOrder --"1" PartType

'Responses'

interface CommandResponse {
}

class CommandResponseOrderList {
}

CommandResponseOrderList --|> CommandResponse
CommandResponseOrderList --"*" TransformOrder

class CommandResponsePartList {
}

(CommandResponsePartList, PartType) .. ResponsePartData

class ResponsePartData { 
  + int quantity;
}

CommandResponsePartList --|> CommandResponse
/'

Routing

'/

class RoutingManager{

  + Conveyor getConveyor(conveyorId);
  + Conveyor getConveyors(EnumConveyorType conveyorType);
  + Route traceRoute(part, process, source, target);

}

RoutingManager --"*" Route

class Route{
  - Conveyor[] conveyors;
  - double weight;
}

Route --"*" Conveyor
Route --"1" Part

/'

Database

'/
class DatabaseManager{
  
  + boolean openConnection();
  + void closeConnection();
  + UnloadOrder fetchPendingUnloadOrders();
  + UnloadOrder fetchAllUnloadOrders();
  + TransformationOrder fetchTransformOrder(orderId);
  + TransformationOrder fetchPendingTransformOrders();
  + TransformationOrder fetchAllTransformOrders();
  + Part fetchPart(id);
  + Part fetchParts();
  + Part fetchParts(orderId, state, limit);
  + Part fetchParts(orderId, type, state, limit);
  + int countUnloadedParts(conveyorId);
  + int countPartsTypes(state);
  + Process fetchProcesses();
  + Duration fetchProcessDurations(assemblerId);
  + int countProcessedParts(assemblerId);
  + boolean clearAllParts();
  + boolean insertPart(part);
  + boolean insertParts(parts);
  + boolean updatePartType(partId, type);
  + boolean updatePartTypeAndOrder(partId, type, orderId);
  + boolean updatePartState(partId, state);
  + boolean updatePartStateAndOrder(partId, state, orderId);
  + boolean insertProcessLog(process, assembler, part);
  + boolean insertUnloadingBayLog(order, Part part);
  + boolean clearAllUnloadOrders();
  + boolean insertUnloadOrder( unloadOrder);
  + boolean clearAllTransformOrders();
  + boolean insertTransformOrder(transformationOrder);
  + boolean incrementTransformOrderCompletions(orderId, quantity);
  + boolean updateTransformOrderStart(orderId, startDate);
  + boolean updateTransformOrderFinish(orderId, finishDate);

}

/'

UDP Manager

'/

class CommsManager{
  - int port;

  + void stopServer();
  + void startServer();
  + void sendUdpData(data);
  + void addUdpListener(listener);
  + PlcConnection getPlcConnection();
  + void dispatchWarehouseInConveyorEntry(conveyorId);
  + Part getWarehouseInConveyorPart(conveyorId);
  + void dispatchWarehouseOutConveyorExit(conveyorId, type);
  + boolean getWarehouseOutConveyorStatus(conveyorId);
  + boolean getLoadConveyorStatus(conveyorId);
  + int getSliderConveyorOccupation(conveyorId);
  + void prepareAssemblyTool(conveyorId, tool);
  + EnumTool getAssemblyConveyorTool(conveyorId);
  + boolean getAssemblyConveyorOccupation(conveyorId);
  + UUID getAssemblyConveyorCompletedStatus(conveyorId);
  + void sendPlcRoute(route);
  + void sendPlcRoute(route, process);

}

/' 

Order Manager

'/

class OrderManager{

  + void checkWarehouseEntries();
  + void checkAssemblyCompletions();
  + void pollLoadOrders();
  + void pollUnloadOrders();
  + void pollTransformOrders();
  + void enqueueUnloadOrder(unloadOrder);
  + void enqueueTransformationOrder(transformationOrder);

}

@enduml
