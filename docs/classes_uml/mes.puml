@startuml
skinparam linetype ortho
skinparam Monochrome true
skinparam classAttributeIconSize 0

title MES UML

'Factory'
class Factory <<Singleton>> {

}

CommandManager "1"--* Factory
DatabaseManager "1"--* Factory
StorageManager "1"--* Factory
RoutingManager "1"--* Factory
RegionManager "1"--* Factory
CommsManager "1"--* Factory
OrderManager "1"--* Factory

/'

Basic blocks

'/

class PartType {
  - String name;
  - Color defaultColor;

  + String getName();
  + Color getDefaultColor();
}

class Part {
  - UUID id;
  - Color color;

  + UUID getID();
  + Color getColor();
  + PartType getType();
}

Part -- PartType

class Tool {
  - int id;
  
  + int getID();
}

/'

Conveyors

'/

class Conveyor {
  - int id;
  - EnumConveyor type;

  + int getID();
  + Part[] getParts();
  + bool hasPart(Part);
}

Conveyor -- Part

/'

Regions

'/
class RegionManager{
  - Region[] regions;
  + Region getRegions();
  + Region getPartRegion(Part);
  + Region getConveyorRegion(Conveyor);
  + Region[] getConnectedRegions(Region, Region);
}

class Region {
  - String name;
  - Conveyor[] inputs;
  - Conveyor[] output;
  - Conveyor[] internal;

  + bool canReceiveFrom(Conveyor);
  + void send(Conveyor);
  + int getNumParts();
  + int getNumParts(PartType);
  + string getName();
  + bool hasPart(Part);
  + bool hasConveyor(Conveyor);
  + Conveyor[] getAllConveyors();
  + Conveyor[] getInputs();
  + Conveyor[] getOutputs();
}

Region "1" -- "*" Conveyor
Region "*"-- RegionManager

class RegionStorage {
  + void store(Part);
  + void extract(PartType);
}

RegionStorage --|> Region

class RegionLoadingBay {
}

RegionLoadingBay --|> Region

class RegionAssemblyLine {
  + void executeProcess(Process, Conveyor);
}

RegionAssemblyLine "2"--|> Region

/'

Processes

'/

class Process {
  - Time time;

  + Time getTime();
}

Process -- "2" PartType
Process -- "1" Tool

/'

Communication

'/

'Requests'

class CommandManager{
  - CommandRequest[] requestQueue;

  - void serializeResponse();
  - void deserializeRequest();
  + void sendResponse();
  + void pollRequests();
  + void enqueueRequest(string);
}

interface CommandRequest {
  + void onReceive();
}

class CommandRequestTransform {
}

CommandRequestTransform --|> CommandRequest
CommandRequestTransform --"1" TransformOrder
TransformOrder -- "2" PartType


class CommandRequestUnload {
  - int orderID;
  - int quantity;

  + int getOrderID();
  + int getQuantity();
}

CommandRequestUnload --|> CommandRequest
CommandRequestUnload -- "1" Conveyor
CommandRequestUnload -- "1" PartType

class CommandRequestLoad {
  - int orderID;

  + int getOrderID();
}

CommandRequestLoad --|> CommandRequest
CommandRequestLoad -- "1" Conveyor
CommandRequestLoad -- "1" PartType

class CommandRequestOrderList {
}

CommandRequestOrderList --|> CommandRequest

class CommandRequestPartList {
}

CommandRequestPartList --|> CommandRequest

'Orders'
class TransformOrder{
  - int orderID;
  - Date date;

  - int quantity;

  - int deadline;
  - int penalty;

  + int getOrderID();
  + Date getDate();
  + int getQuantity();
  + int getDayPenalty();
  + int computePenalty(Date);
}

'Responses'

interface CommandResponse {
}

class CommandResponseOrderList {
}

CommandResponseOrderList --|> CommandResponse
CommandResponseOrderList --"*" TransformOrder

class CommandResponsePartList {
}

(CommandResponsePartList, PartType) .. ResponsePartData

class ResponsePartData { 
  + int quantity;
}

CommandResponsePartList --|> CommandResponse
/'

Routing

'/

class RoutingManager{
  - Route[] routes;

  - Route traceRoute(Map<Region, Route[]>);
  - Route[] makeRegionRoutes(Region);
  - bool enqueueRoute(Route);
  
  + Route makeRoute(Conveyor, Conveyor);
  + Routes[] getRoutes();
  + Routes[] getRoutes(Conveyor);
  + Routes[] getRoutes(Region);
  + bool initRoute(Route);
}

RoutingManager --"*" Route

class Route{
  -Conveyor[] conveyors;
}

Route --"*" Conveyor
Route --"1" Part

/'

Database

'/
class DatabaseManager{
  
  + void initDatabase();
  + Database getDatabase();
  + T query(T);
  + void update(T);
  + void closeDatabase();
}

/'

Storage

'/
class StorageManager{
  + int getQuantity(PartType);
  + void store(Part);
  + void extract(PartType);
}

StorageManager -- "*" Part

/'

UDP Manager

'/
class CommsManager{
  - int port;

  + void stopServer();
  + void startServer();
}

/' 

Order Manager

'/

class OrderManager{

  + void pollOrders();
  + T enqueueOrders();
}

@enduml
