@startuml
skinparam linetype ortho
skinparam Monochrome true

title MES UML

/'

Basic blocks

'/

class PartType {
  String name;
  Color defaultColor;
}

class Part {
  UUID id;
  Color color;
}

Part -- PartType

class Tool {
  int id;
}

/'

Conveyors

'/

class Conveyor {
  int id;
  EnumConveyor type;
}

Conveyor -- Part

/'

Regions

'/

class Region {
  String name;
  Conveyor[] inputs;
  Conveyor[] output;
  Conveyor[] internal;

  bool canReceiveFrom(Conveyor);
  void send(Conveyor);
}

Region "1" -- "*" Conveyor

class RegionStorage {
  int getQuantity(PartType);
  void store(Part);
  void extract(PartType);
}

RegionStorage --|> Region
RegionStorage -- "*" Part

class RegionLoadingBay {
}

RegionLoadingBay --|> Region

class RegionAssemblyLineLeft {
  void executeProcess(Process, Conveyor);
}

RegionAssemblyLineLeft --|> Region

class RegionAssemblyLineRight {
  void executeProcess(Process, Conveyor);
}

RegionAssemblyLineRight --|> Region

/'

Processes

'/

class Process {
  Time time;
}

Process -- "2" PartType
Process -- "1" Tool

/'

Communication

'/

'Requests'

class CommandRequest {
  void parseRequest();
  void onReceive();
}

class CommandRequestTransform {
  int orderID;
  Date date;

  PartType source;
  PartType result;
  int quantity;

  int deadline;
  int penalty;

  
}

CommandRequestTransform --|> CommandRequest
CommandRequestTransform -- "2" PartType

class CommandRequestUnload {
  int orderID
  PartType type
  int quantity
}

CommandRequestUnload --|> CommandRequest
CommandRequestUnload -- "1" Conveyor
CommandRequestUnload -- "2" PartType

class CommandRequestLoad {
  int orderID
  PartType type
}

CommandRequestLoad --|> CommandRequest
CommandRequestLoad -- "1" Conveyor
CommandRequestLoad -- "2" PartType

class CommandRequestList {
}

CommandRequestList --|> CommandRequest

'Responses'

class CommandResponse {
  void serializeResponse();
  void send();
}

class CommandResponseList {
  
}

CommandResponseList --|> CommandResponse

@enduml
